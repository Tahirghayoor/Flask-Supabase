


------------------------------------------------------Project Setup & Virtual Environment-------------------------------------------------------------------
=> Step 1: Project Setup & Virtual Environment
Virtual Environment (venv) is a self-contained Python environment that:

Isolates project dependencies from system-wide packages
Prevents version conflicts between projects
Makes deployment easier
Keeps your global Python installation clean

=> Terminal Commands

# Create virtual environment
python -m venv .venv

# Activate virtual environment
# Windows:
.venv\Scripts\activate
# macOS/Linux:
source .venv/bin/activate

# Verify activation (should show (.venv) in prompt)

=> Step 2: Install Required Packages
Create requirements.txt with:

Flask==2.3.3
python-dotenv==1.0.0
supabase==1.0.3
Flask-CORS==4.0.0


Install packages:

=> Terminal Commands

pip install -r requirements.txt

Package Explanations:

Flask: Web framework for building APIs
python-dotenv: Loads environment variables from .env file
supabase: Python client for Supabase (PostgreSQL + Auth)
Flask-CORS: Handles cross-origin requests (for Postman testing)


=> Step 3: Environment Configuration

Create .env file (based on .env.example):

# Supabase Configuration
SUPABASE_URL=your_supabase_url
SUPABASE_KEY=your_supabase_service_role_key


=> Step 4: Database Setup in Supabase
#Code
Create a simple table using Supabase SQL Editor:

CREATE TABLE contacts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT NOT NULL,
    phone TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);


=> Step 5: Flask Application Structure
#Code

from flask import Flask
from flask_cors import CORS
from dotenv import load_dotenv
import os
from supabase import create_client

load_dotenv()  # Load environment variables

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Initialize Supabase
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_KEY")
supabase = create_client(supabase_url, supabase_key)

from app import routes


-> File: app/models.py 
#Code

# Simple data model (not an ORM, just for structure)
class Contact:
    def __init__(self, id=None, name=None, email=None, phone=None):
        self.id = id
        self.name = name
        self.email = email
        self.phone = phone


-> File: app/routes.py
#Code

from flask import request, jsonify
from app import app, supabase
from app.models import Contact

# CREATE
@app.route('/contacts', methods=['POST'])
def create_contact():
    data = request.get_json()
    try:
        response = supabase.table('contacts').insert({
            'name': data['name'],
            'email': data['email'],
            'phone': data.get('phone')
        }).execute()
        return jsonify(response['data'][0]), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 400

# READ ALL
@app.route('/contacts', methods=['GET'])
def get_contacts():
    try:
        response = supabase.table('contacts').select('*').execute()
        return jsonify(response['data']), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# READ ONE
@app.route('/contacts/<int:contact_id>', methods=['GET'])
def get_contact(contact_id):
    try:
        response = supabase.table('contacts').select('*').eq('id', contact_id).execute()
        if response['data']:
            return jsonify(response['data'][0]), 200
        return jsonify({'error': 'Contact not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# UPDATE
@app.route('/contacts/<int:contact_id>', methods=['PUT'])
def update_contact(contact_id):
    data = request.get_json()
    try:
        response = supabase.table('contacts').update({
            'name': data.get('name'),
            'email': data.get('email'),
            'phone': data.get('phone')
        }).eq('id', contact_id).execute()
        if response['data']:
            return jsonify(response['data'][0]), 200
        return jsonify({'error': 'Contact not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 400

# DELETE
@app.route('/contacts/<int:contact_id>', methods=['DELETE'])
def delete_contact(contact_id):
    try:
        response = supabase.table('contacts').delete().eq('id', contact_id).execute()
        if response['data']:
            return jsonify({'message': 'Contact deleted'}), 200
        return jsonify({'error': 'Contact not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500



-> File: app.py
#Code 

from app import app

if __name__ == '__main__':
    app.run(debug=True)


=> Step 6: Run the Application
#Terminal Commands

python app.py


Step 7: Test with Postman

1) Create Contact (POST)
URL: http://localhost:5000/contacts

Body > raw > JSON:

{
    "name": "John Doe",
    "email": "john@example.com",
    "phone": "1234567890"
}

2) Get All Contacts (GET)
URL: http://localhost:5000/contacts

3) Get Single Contact (GET)
URL: http://localhost:5000/contacts/1 (use actual ID)

4) Update Contact (PUT)
URL: http://localhost:5000/contacts/1

Body > raw > JSON:

{
    "name": "Jane Doe",
    "email": "jane@example.com"
}

5) Delete Contact (DELETE)

URL: http://localhost:5000/contacts/1


--------------------------------------

Key Concepts Explained
Virtual Environment (venv):
Why use it? Prevents dependency conflicts between projects
How it works: Creates isolated Python environment with its own packages
Best practice: Always use venv for new projects
Supabase:
Open-source Firebase alternative
Provides PostgreSQL database, authentication, storage
We're using it as our backend database
Service role key gives full database access (use only in backend)
Flask:
Micro web framework for Python
Minimalist but extensible
Perfect for building APIs
CRUD Operations:
Create: POST requests to add new data
Read: GET requests to retrieve data
Update: PUT requests to modify existing data
Delete: DELETE requests to remove data
Environment Variables:
Store sensitive data (API keys, DB credentials)
Never commit .env to version control
Use .env.example as template
Troubleshooting Tips
Module Not Found Errors:
Ensure virtual environment is activated
Check packages installed with pip list
Verify you're running from correct directory
Supabase Connection Issues:
Verify SUPABASE_URL and SUPABASE_KEY in .env
Check network connectivity
Ensure IP is whitelisted in Supabase settings



--------------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------------SUPABASE_KEY------------------------------------------------------------
Where to find it:

In the same Settings â†’ API section
Look under Project API keys
You'll see two keys:
anon public key (safe to use in frontend)
service_role secret key (NEVER use in frontend)

We need the service_role key because:

-> It bypasses Row Level Security (RSL)
-> Has full database access (create, read, update, delete)
-> Required for backend operations

# service role key : eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF5d2x1c2lueWVocW5ta2Zqb2t5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Mzk3NjEzMSwiZXhwIjoyMDY5NTUyMTMxfQ.0wWXylB0FqCSOsYc19SW3bmcyjKCbZhYDaALzpv3Amo
----------------------------------------------------------------------------------------------------------------



